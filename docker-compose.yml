version: '3.8'

services:
  # Frontend (Static files served by nginx)
  frontend:
    image: nginx:alpine
    container_name: ai-tools-frontend
    ports:
      - "8000:80"
    volumes:
      - ./:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - ai-tools-network
    restart: unless-stopped

  # Backend API (Node.js + Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-tools-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-ai_tools_password}@db:5432/ai_tools_hub
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - redis
      - db
    networks:
      - ai-tools-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ai-tools-database
    environment:
      - POSTGRES_DB=ai_tools_hub
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD:-ai_tools_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ai-tools-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ai_tools_hub"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: ai-tools-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-tools-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Optional: Adminer for database management
  adminer:
    image: adminer
    container_name: ai-tools-adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - ai-tools-network
    environment:
      - ADMINER_DEFAULT_SERVER=db
    profiles:
      - dev

volumes:
  postgres_data:
  redis_data:

networks:
  ai-tools-network:
    driver: bridge